<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:annotation-config />
    <context:component-scan base-package="digitalCanteenSSM.shiro.realm"></context:component-scan>
    <context:component-scan base-package="digitalCanteenSSM.serviceImpl"></context:component-scan>

    <bean id="myRealm" class="digitalCanteenSSM.shiro.realm.MyRealm" />     

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 指定Shiro验证用户登录的类为自定义的Realm（若有多个Realm，可用[realms]属性代替） -->
    	<!--
        <property name="realm">
        	<bean class="digitalCanteenSSM.shiro.realm.MyRealm"/>
    	</property>
        -->
        <property name="realm" ref="myRealm" />
    
    	<!--
    		Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者这里自定义的MyRealm
                    	而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
    	-->
    	<!-- <property name="sessionMode" value="native"/> -->
	</bean>
  
    <!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，并且Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>

        <!-- 要求登录时的链接（可根据项目的URL进行替换），非必须的属性，默认会找Web工程根目录下的[/login.jsp] -->
        <property name="loginUrl" value="/login.jsp"/>

        <!-- 登录成功后要跳转的连接（本例中此属性用不到，因为登录成功后的处理逻辑已在LoginController中硬编码为main.jsp） -->
        <!-- <property name="successUrl" value="/system/main"/> -->

        <!--
   	     	用户访问未授权的资源时，所显示的连接
        	若想更明显的测试此属性可以修改它的值，比如unauthor.jsp
        	然后用[xuanyu]登录后访问/admin/list.jsp就看见浏览器会显示unauthor.jsp
        -->
        <property name="unauthorizedUrl" value="/login.jsp"/>

        <!--
        	Shiro连接约束配置，即过滤链的定义
        	更详细介绍，请见本文下方提供的Shiro-1.2.2内置的FilterChain说明
        	下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的
        	anon：它对应的过滤器里面是空的，什么都没做，另外.do和.jsp后面的*表示参数，比方说[login.jsp?main]这种
        	authc：该过滤器下的页面必须验证后才能访问，它是内置的org.apache.shiro.web.filter.authc.FormAuthenticationFilter
        	注意：对于相似的资源，需要将anon的设置放在authc前面，anon才会生效，因为Shiro是从上往下匹配URL的，匹配成功便不再匹配了
        -->
        <property name="filterChainDefinitions">
            <value>
                /campusPreset.action                  = roles[super]
                /findAllCampuses.action               = roles[super]
                /findCampusById.action                = roles[super]
                /findCampusByName.action              = roles[super]
                /modifyCampus.action                  = roles[super]
                /modifyCampusSave.action              = roles[super]
                /updateCampus.action                  = roles[super]
                /deleteCampusById.action              = roles[super]
                /insertCampus.action                  = roles[super]
              
                /canteenPreset.action                 = roles[super]
                /findAllCanteens.action               = roles[super]
                /findCanteenById.action               = roles[super]
                /modifyCanteen.action                 = roles[super]
                /modifyCanteenSave.action             = roles[super]
                /deleteCanteenById.action             = roles[super]
                /insertCanteen.action                 = roles[super]
         
                /canteenTypePreset.action             = roles[super]
                /findAllCanteenType.action            = roles[super]
                /findCanteenTypeById.action           = roles[super]
                /findCanteenTypeByName.action         = roles[super]
                /modifyCanteenType.action             = roles[super]
                /modifyCanteenTypeSave.action         = roles[super]
                /updateCanteenType.action             = roles[super]
                /deleteCanteenTypeById.action         = roles[super]
                /insertCanteenType.action             = roles[super]
 
                /dishPreset.action                    = roles[super]
                /findAllDishPreset.action             = roles[super]
                /findDishPresetById.action            = roles[super]
                /modifyDishPreset.action              = roles[super]
                /modifyDishPresetSave.action          = roles[super]
                /deleteDishPresetById.action          = roles[super]
                /insertDishPreset.action               = roles[super]

                /dishTypePreset.action                = roles[super]
                /findAllDishType.action               = roles[super]
                /findDishTypeById.action              = roles[super]
                /findDishTypeByName.action            = roles[super]
                /modifyDishType.action                = roles[super]
                /modifyDishTypeSave.action            = roles[super]
                /updateDishType.action                = roles[super]
                /deleteDishTypeById.action            = roles[super]
                /insertDishType.action                = roles[super]

                /backgroundHomepage.action            = roles[super]
                /muserBackground.action               = roles[super]
                /recordDish.action                    = roles[super]
                /muserBackgroundUserManagement.action = roles[super]
                /findAllMUser.action                  = roles[super]
                /addMUser.action                      = roles[super]
                /insertmuser.action                   = roles[super]
                /deleteMUserById.action               = roles[super]
                /findRecordInCampus.action            = roles[super]
                /recordExportToExcel.action           = roles[super]
                /campusRecordExportToExcel.action     = roles[super]
                /modifyMUser.action                   = authc
                /modifyMUserSave.action               = authc

                /windowPreset.action                  = roles[super]
                /findAllWindows.action                = roles[super]
                /findWindowById.action                = roles[super]
                /modifyWindow.action                  = roles[super]
                /modifyWindowSave.action              = roles[super]
                /deleteWindowById.action              = roles[super]
                /insertWindow.action                  = roles[super]

                /dishManagement.action                = roles[canteen]
                /findDishInCanteen.action             = roles[canteen]
                /findDishInCampus.action              = roles[canteen]
                /checkDish.action                     = roles[super]
                /importDish.action                    = roles[canteen]
                /importReplenishDish.action           = roles[canteen]
                /importHandle.action                  = roles[canteen]
                /getDishInImportDate.action           = roles[canteen]
                /getDishInImportReplenishDate.action  = roles[canteen]
                /addDish.action                       = roles[canteen]
                /applyDish.action                     = roles[canteen]
                /findDishById.action                  = roles[canteen]
                /modifyDish.action                    = roles[canteen]
                /modifyDishSave.action                = roles[canteen]
                /insertDish.action                    = roles[canteen]
                /deleteDishById.action                = roles[canteen]
 
                /muserCanteenHostPage.action          = roles[canteen]
 
                /deleteDetailDish.action              = roles[canteen]
 
                /findRecordDetailDish.action          = authc
                /deleteRecord.action                  = authc
                /modifyRecordDetailDish.action        = authc
                /modifyRecordDetailDishSave.action    = authc
            </value>
        </property>
	</bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <!-- http://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/spring/LifecycleBeanPostProcessor.html -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>